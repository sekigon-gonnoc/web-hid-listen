{"mappings":"oIAEA,MAAAA,yBASWC,KAAKC,WAGdC,kBACUC,EAAAA,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAqB,GACrBC,EAAAA,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAwB,4BAb4B,6BACjB,6BACQ,oBAE1B,2BAEG,QAMpBD,WAAAA,OACAC,cAAAA,EAGVC,mBAAmBC,GACjBN,KAAKO,gBAAmBC,IACtBF,EAAAA,IAAgBG,WAAWD,EAAEE,KAAKC,QAAQC,QAAQC,GAAW,GAALA,MAE1Db,KAAKc,KAAKC,iBAAiB,cAAef,KAAKO,iBAC/CS,QAAQC,IAAIjB,KAAKc,MAEnBI,iBAAiBC,GACfnB,KAAKoB,cAAgBD,EAEvBE,iBAAiBF,GACfnB,KAAKoB,cAAgBD,aAGZG,EAA8BC,SACjCC,QAAgBC,UAAUC,IAAIC,cAAAA,CAClCC,QAAAA,CAAAA,CAAYC,UAAW,MAAQC,MAAO,QAExCd,QAAQC,IAAIO,GACZxB,KAAKc,KAAOU,EAAQ,aAGZxB,KAAKc,KAAKiB,aACTvB,gBACDR,KAAKc,KAAKkB,QACTC,QAAQC,OAAO1B,GAGxBR,KAAKC,YAAa,EAEdqB,GACFA,IAKFN,QAAQC,IAAI,uCAGIkB,aACNC,MAAM,+BAGND,aACAC,MAAM,oCAIZpC,KAAKqC,eACPrC,KAAKqC,gBAGHrC,KAAKc,eAECd,KAAKc,KAAKkB,QAChBhC,KAAKc,KAAO,KACZd,KAAKC,YAAa,QACXO,GACPQ,QAAQsB,MAAM9B,GAIlBQ,QAAQC,IAAI,4BC9EZsB,QAEEC,EAAgB,IAEtBC,SAASC,eACP,YACAC,UAAAA,YAAAA,OAAAA,WAEIlB,UAAkBmB,QACtBC,MAAM,iCAIJC,EADAC,EAAgBN,SAASC,eAAe,WAE5CK,EAAcC,QAAUC,mBAClBV,UAAAA,SAAAA,IAAAA,GAAAA,EAAKW,UACPH,EAAcJ,UAAY,UAC1BQ,cAAcL,SACRP,EAAIP,iBAGRO,EAAAA,IAAAA,QACMA,EAAIR,KAAK,KAAA,IACfQ,EAAIlC,mBAAmB+C,GACvBL,EAAcJ,UAAY,aAC1BG,EAAgBO,YAAYC,EAAe,UACpC9C,GACPQ,QAAQsB,MAAM9B,WAKd+C,EAAad,SAASC,eAAe,eACvCc,EAAW,GAuBf,SAAAF,IACEC,EAAWE,mBAAmB,YAAaD,GAC3CA,EAAW,GAENf,SAASC,eAAe,cAAmCgB,UAC9DH,EAAWI,UAAYJ,EAAWK,cAGhCL,EAAWM,UAAUC,OAAStB,IAChCe,EAAWM,UAAYN,EAAWM,UAAUE,MAC1CR,EAAWM,UAAUC,OAAStB,IAKpC,SAAAY,EAA4BjB,GAC1BqB,IAAAA,IAAgBQ,aAAcC,OAAO9B,GArCvCM,SAASC,eAAe,SAASM,QAAU,KACzCO,EAAWM,UAAY,IAGzBpB,SAASC,eAAe,QAAQM,QAAU,SACpCkB,EAA8BzB,SAASC,eAAe,uBAEpDyB,EAAAA,IAAWC,KAAKA,KAAKC,WACvBC,EAASC,IAAiB,KAAOA,EAAIC,YAAYT,OAAO,GAC5DG,EAASA,SAAAA,GAAAA,OAAcC,EAAKM,eAAAA,OAAgBH,EAC1CH,EAAKO,WAAa,IAAAC,OAChBL,EAAMH,EAAKS,YAAAA,OAAaN,EAAMH,EAAKU,aAAAA,OAAcP,EACnDH,EAAKW,eAAAA,OACHR,EAAMH,EAAKY,cAAAA,QAEfb,EAASc,KAAOC,IAAIC,gBAAAA,IACdC,KAAAA,CAAM5B,EAAWM,WAAAA,CAAcuB,KAAM,gBAE3ClB,EAASmB","sources":["./src/webRawHID.ts","./src/index.ts"],"sourcesContent":["import { WebUsbComInterface } from \"./webUsbComInterface\";\n\nclass WebRawHID implements WebUsbComInterface {\n  private receiveCallback: ((msg: Uint8Array) => void) | null = null;\n  private closeCallback: (() => void) | null = null;\n  private errorCallback: ((e: Error) => void) | null = null;\n\n  private port: any | null = null;\n\n  private _connected: boolean = false;\n  get connected() {\n    return this._connected;\n  }\n\n  constructor(\n    private send_chunk: number = 64,\n    private send_interval: number = 30\n  ) {}\n\n  setReceiveCallback(recvHandler: ((msg: Uint8Array) => void) | null) {\n    this.receiveCallback = (e: any) => {\n      recvHandler(new Uint8Array(e.data.buffer).filter((x) => x != 0));\n    };\n    this.port.addEventListener(\"inputreport\", this.receiveCallback);\n    console.log(this.port);\n  }\n  setErrorCallback(handler: (e: Error) => void | null) {\n    this.errorCallback = handler;\n  }\n  setCloseCallback(handler: () => void | null) {\n    this.errorCallback = handler;\n  }\n\n  async open(onConnect: () => void | null, _: object) {\n    const request = await navigator.hid.requestDevice({\n      filters: [{ usagePage: 0xff31, usage: 0x74 }],\n    });\n    console.log(request);\n    this.port = request[0];\n\n    try {\n      await this.port.open();\n    } catch (e) {\n      await this.port.close();\n      return Promise.reject(e);\n    }\n\n    this._connected = true;\n\n    if (onConnect) {\n      onConnect();\n    }\n\n    // this.readLoop();\n\n    console.log(\"open Raw HID port\");\n  }\n\n  async writeString(msg: string) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async write(msg: Uint8Array) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async close() {\n    if (this.closeCallback) {\n      this.closeCallback();\n    }\n\n    if (this.port) {\n      try {\n        await this.port.close();\n        this.port = null;\n        this._connected = false;\n      } catch (e) {\n        console.error(e);\n      }\n    }\n\n    console.log(\"Raw HID port closed\");\n  }\n}\n\nexport { WebRawHID };\n","import { WebRawHID } from \"./webRawHID\";\nimport { WebUsbComInterface } from \"./webUsbComInterface\";\n\nlet com: WebUsbComInterface;\n\nconst consoleLength = 1000000;\n\ndocument.getElementById(\n  \"revision\"\n).innerText = `Revision:${process.env.REVISION}`;\n\nif (!(navigator as any).serial) {\n  alert(\"Please use chrome or edge\");\n}\n\nlet connectButton = document.getElementById(\"connect\");\nlet updateTimerId: NodeJS.Timeout;\nconnectButton.onclick = async () => {\n  if (com?.connected) {\n    connectButton.innerText = \"Connect\";\n    clearInterval(updateTimerId);\n    await com.close();\n  } else {\n    try {\n      com = new WebRawHID();\n      await com.open(null, {});\n      com.setReceiveCallback(dataReceiveHandler);\n      connectButton.innerText = \"Disconnect\";\n      updateTimerId = setInterval(updateConsole, 50);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n};\n\nconst hidConsole = document.getElementById(\"console\");\nlet recvLine = \"\";\n\ndocument.getElementById(\"clear\").onclick = () => {\n  hidConsole.innerHTML = \"\";\n};\n\ndocument.getElementById(\"save\").onclick = () => {\n  let download = <HTMLAnchorElement>document.getElementById(\"download-file\");\n\n  const date = new Date(Date.now());\n  let padd2 = (str: number) => (\"00\" + str.toString()).slice(-2);\n  download.download = `${date.getFullYear()}${padd2(\n    date.getMonth() + 1\n  )}${padd2(date.getDate())}${padd2(date.getHours())}${padd2(\n    date.getMinutes()\n  )}${padd2(date.getSeconds())}.txt`;\n\n  download.href = URL.createObjectURL(\n    new Blob([hidConsole.innerHTML], { type: \"text/plain\" })\n  );\n  download.click();\n};\n\nfunction updateConsole() {\n  hidConsole.insertAdjacentText(\"beforeend\", recvLine);\n  recvLine = \"\";\n\n  if ((document.getElementById(\"autoscroll\") as HTMLInputElement).checked) {\n    hidConsole.scrollTop = hidConsole.scrollHeight;\n  }\n\n  if (hidConsole.innerHTML.length > consoleLength) {\n    hidConsole.innerHTML = hidConsole.innerHTML.slice(\n      hidConsole.innerHTML.length - consoleLength\n    );\n  }\n}\n\nfunction dataReceiveHandler(msg: Uint8Array) {\n  recvLine += new TextDecoder().decode(msg);\n}\n"],"names":["$2a3bb05c5d9ba4cdb289d97f4786002b$export$WebRawHID","this","_connected","constructor","send_chunk","send_interval","setReceiveCallback","recvHandler","receiveCallback","e","Uint8Array","data","buffer","filter","x","port","addEventListener","console","log","setErrorCallback","handler","errorCallback","setCloseCallback","onConnect","_","request","navigator","hid","requestDevice","filters","usagePage","usage","open","close","Promise","reject","msg","Error","closeCallback","error","$94c746d8cae22801b10b3b436ba25f24$var$com","$94c746d8cae22801b10b3b436ba25f24$var$consoleLength","document","getElementById","innerText","serial","alert","$94c746d8cae22801b10b3b436ba25f24$var$updateTimerId","$94c746d8cae22801b10b3b436ba25f24$var$connectButton","onclick","async","connected","clearInterval","$94c746d8cae22801b10b3b436ba25f24$var$dataReceiveHandler","setInterval","$94c746d8cae22801b10b3b436ba25f24$var$updateConsole","$94c746d8cae22801b10b3b436ba25f24$var$hidConsole","$94c746d8cae22801b10b3b436ba25f24$var$recvLine","insertAdjacentText","checked","scrollTop","scrollHeight","innerHTML","length","slice","TextDecoder","decode","download","date","Date","now","padd2","str","toString","getFullYear","getMonth","concat","getDate","getHours","getMinutes","getSeconds","href","URL","createObjectURL","Blob","type","click"],"version":3,"file":"index.e4d4db74.js.map"}